/*
	meowbot
	Copyright (C) 2008-2009 Park Jeong Min <pjm0616_at_gmail_d0t_com>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/



#include <cstring>
#include <string>
#include <map>

#include "defs.h"
#include "ircstring.h"

#if IRC_CHARMAP == IRC_CHARMAP_RFC1459
# define IRCCHAR_RFC1459_C1_LOWERCASE '^'
# define IRCCHAR_RFC1459_C1_UPPERCASE '^'
# define IRCCHAR_RFC1459_C2_LOWERCASE '~'
# define IRCCHAR_RFC1459_C2_UPPERCASE '~'
#else /* IRC_CHARMAP == IRC_CHARMAP_RFC1459E */
# define IRCCHAR_RFC1459_C1_LOWERCASE '~'
# define IRCCHAR_RFC1459_C1_UPPERCASE '^'
# define IRCCHAR_RFC1459_C2_LOWERCASE '~'
# define IRCCHAR_RFC1459_C2_UPPERCASE '^'
#endif

// lower	->	UPPER
// []\~		->	{}|^
static unsigned char irc_tolowertab[] = 
{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
	' ', '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', 
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', 
	'@', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 
	'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', IRCCHAR_RFC1459_C1_LOWERCASE, '_', 
	'`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 
	'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', IRCCHAR_RFC1459_C2_LOWERCASE, 0x7f,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

static unsigned char irc_touppertab[] =
{
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
	' ', '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', 
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', 
	'@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 
	'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']', IRCCHAR_RFC1459_C1_UPPERCASE, '_', 
	'`', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 
	'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']', IRCCHAR_RFC1459_C2_UPPERCASE, 0x7f, 
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

char irc_tolower(char c)
{
#if IRC_CHARMAP == IRC_CHARMAP_RFC1459 || IRC_CHARMAP == IRC_CHARMAP_RFC1459E
	return irc_tolowertab[(unsigned char)c];
#elif IRC_CHARMAP == IRC_CHARMAP_ASCII
	return tolower(c);
#else
	return c;
#endif
}

char irc_toupper(char c)
{
#if IRC_CHARMAP == IRC_CHARMAP_RFC1459 || IRC_CHARMAP == IRC_CHARMAP_RFC1459E
	return irc_touppertab[(unsigned char)c];
#elif IRC_CHARMAP == IRC_CHARMAP_ASCII
	return toupper(c);
#else
	return c;
#endif
}

std::string irc_strlower(const std::string &str)
{
	const unsigned char *src = (const unsigned char *)str.c_str();
	char *buf = new char[str.length() + 1];
	for(unsigned char *p = (unsigned char *)buf; (*p++ = irc_tolower(*src++)); ){}
	std::string result(buf);
	delete[] buf;
	return result;
}

std::string irc_strupper(const std::string &str)
{
	const unsigned char *src = (const unsigned char *)str.c_str();
	char *buf = new char[str.length() + 1];
	for(unsigned char *p = (unsigned char *)buf; (*p++ = irc_toupper(*src++)); ){}
	std::string result(buf);
	delete[] buf;
	return result;
}

int irc_strcasecmp(const char *s1, const char *s2)
{
	const unsigned char *us1 = reinterpret_cast<const unsigned char *>(s1);
	const unsigned char *us2 = reinterpret_cast<const unsigned char *>(s2);
	int r;
	
	while((r = irc_tolower(*us1) - irc_tolower(*us2)) == 0)
	{
		if(!*us1)
			break;
		us1++;
		us2++;
	}
	
	return r;
}


int irc_strncasecmp(const char *s1, const char *s2, int n)
{
	const unsigned char *us1 = reinterpret_cast<const unsigned char *>(s1);
	const unsigned char *us2 = reinterpret_cast<const unsigned char *>(s2);
	int r;
	
	while((r = irc_tolower(*us1) - irc_tolower(*us2)) == 0)
	{
		if(!*us1 || --n == 0)
			break;
		us1++;
		us2++;
	}
	
	return r;
}

int irc_strcasecmp(const std::string &s1, const std::string &s2)
{
	return irc_strcasecmp(s1.c_str(), s2.c_str());
}

int irc_strncasecmp(const std::string &s1, const std::string &s2, int n)
{
	return irc_strncasecmp(s1.c_str(), s2.c_str(), n);
}






// vim: set tabstop=4 textwidth=80:

